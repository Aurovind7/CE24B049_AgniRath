def calculate_steady_state_temp(T_a, tau, omega): # MODIFIED: Added "omega" as a required parameter
    """
    Calculates the steady-state winding temperature (Tw) of a motor through an iterative process.

    Args:
        T_a (float): Ambient temperature in Kelvin (K)
        tau (float): Motor torque in Newton-meters (Nm)
        omega (float): Motor angular velocity in radians per second (rad/s)

    Returns:
        float: The steady-state winding temperature in Kelvin (K), rounded to 1 decimal place
    """
    
    # 1. INITIALIZATION
    # Start with the initial guess for the winding temperature (in Kelvin) as specified. Using a float ensures all subsequent calculations maintain precision.
    T_w = 323.0

    # Set a maximum number of iterations to prevent an infinite loop in case
    # the calculation fails to converge, which is a good safety practice.
    MAX_ITERATIONS = 100

    for i in range(MAX_ITERATIONS):
        # Store the temperature from the previous loop to check for convergence later.
        T_w_previous = T_w

        # 2. IMPLEMENT THE PHYSICS EQUATIONS
        # These steps follow the thermal model equations provided in the prompt
        # Equation 1: Magnet Temperature (Tm)
        T_m = (T_a + T_w) / 2

        # Equation 2: Remanence (B), the strength of the magnets
        B = 1.32 - 1.2e-3 * (T_m - 293)

        # Equation 3: Phase Current (i) required to produce the given torque
        i = 0.561 * B * tau

        # Equation 4: Winding Resistance (R), which increases with temperature
        R = 0.0575 * (1 + 0.0039 * (T_w - 293))

        # Equation 5: Copper Loss (Pc), heat generated by current in the windings
        P_c = 3 * (i**2) * R

        # MODIFIED: Equation 6: Eddy Loss (Pe), using omega (speed) instead of tau (torque) 
        # This is the corrected formula based on the motor's datasheet.
        P_e = (9.602e-6 * (B * omega)**2) / R

        # Equation 7: Update Winding Temperature (Tw)
        # This is the new estimate for Tw based on the total heat generated (Pc + Pe) and the motor's ability to dissipate that heat (the 0.455 K/W thermal resistance).
        T_w = 0.455 * (P_c + P_e) + T_a

        # 3. CHECK FOR CONVERGENCE
        # The process is complete when the temperature stops changing significantly. We check if the change is less than the 1 K threshold.
        if abs(T_w - T_w_previous) < 1.0:
            break  # Exit the loop as we have found the steady-state temperature

    # 4. RETURN THE RESULT. Return the final calculated temperature, rounded to one decimal place as requested.
    return round(T_w, 1)